{"version":3,"sources":["../src/js/map-routes.js"],"names":["mapRoutes","schema","parent","type","Array","isArray","allPaths","forEach","route","Object","assign","content","children","path","url","p"],"mappings":";;;;;;;AAAA;;;;;;;;AAEA,IAAMA,SAAS,GAAG,SAAZA,SAAY,CAACC,MAAD,EAA0B;AAAA,MAAjBC,MAAiB,uEAAR,GAAQ;AAC1C,MAAIC,IAAI,GAAGC,KAAK,CAACC,OAAN,CAAcJ,MAAd,IAAwB,OAAxB,WAAyCA,MAAzC,CAAX;AACA,MAAIK,QAAQ,GAAG,EAAf;;AACA,UAAQH,IAAR;AACE,SAAK,OAAL;AAAc;AACZF,QAAAA,MAAM,CAACM,OAAP,CAAe,UAAAC,KAAK,EAAI;AACtBC,UAAAA,MAAM,CAACC,MAAP,CAAcJ,QAAd,EAAwBN,SAAS,CAACQ,KAAD,EAAQN,MAAR,CAAjC;AACD,SAFD;AAGA;AACD;;AACD,SAAK,QAAL;AAAe;AAAA,YACPS,OADO,GACqBV,MADrB,CACPU,OADO;AAAA,YACEC,QADF,GACqBX,MADrB,CACEW,QADF;AAAA,YACYC,IADZ,GACqBZ,MADrB,CACYY,IADZ;AAEb,YAAIC,GAAJ;;AACA,YAAIV,KAAK,CAACC,OAAN,CAAcQ,IAAd,CAAJ,EAAyB;AACvBA,UAAAA,IAAI,CAACN,OAAL,CAAa,UAAAQ,CAAC,EAAI;AAChBD,YAAAA,GAAG,GAAG,yBAAQZ,MAAR,EAAgBa,CAAhB,CAAN;AACA,gBAAIJ,OAAJ,EAAaF,MAAM,CAACC,MAAP,CAAcJ,QAAd,EAAwBN,SAAS,CAACW,OAAD,EAAUG,GAAV,CAAjC;AACd,WAHD;AAID,SALD,MAKO;AACLA,UAAAA,GAAG,GAAG,yBAAQZ,MAAR,EAAgBW,IAAI,IAAI,GAAxB,CAAN;AACA,cAAIF,OAAJ,EAAaF,MAAM,CAACC,MAAP,CAAcJ,QAAd,EAAwBN,SAAS,CAACW,OAAD,EAAUG,GAAV,CAAjC;AACd;;AACD,YAAIF,QAAJ,EACEH,MAAM,CAACC,MAAP,CAAcJ,QAAd,EAAwBN,SAAS,CAACY,QAAD,EAAWE,GAAX,CAAjC;AACF;AACD;;AACD;AAAS;AACPR,QAAAA,QAAQ,uBACLJ,MADK,EACID,MADJ,CAAR;AAGD;AA3BH;;AA6BA,SAAOK,QAAP;AACD,CAjCD;;eAmCeN,S","sourcesContent":["import urlJoin from \"url-join\";\n\nconst mapRoutes = (schema, parent = '/') => {\n  let type = Array.isArray(schema) ? 'array' : typeof schema;\n  let allPaths = {};\n  switch (type) {\n    case 'array': {\n      schema.forEach(route => {\n        Object.assign(allPaths, mapRoutes(route, parent));\n      });\n      break;\n    }\n    case 'object': {\n      let { content, children, path } = schema;\n      let url;\n      if (Array.isArray(path)) {\n        path.forEach(p => {\n          url = urlJoin(parent, p);\n          if (content) Object.assign(allPaths, mapRoutes(content, url));\n        });\n      } else {\n        url = urlJoin(parent, path || '/');\n        if (content) Object.assign(allPaths, mapRoutes(content, url));\n      }\n      if (children)\n        Object.assign(allPaths, mapRoutes(children, url));\n      break;\n    }\n    default: {\n      allPaths = {\n        [parent]: schema\n      };\n    }\n  }\n  return allPaths;\n}\n\nexport default mapRoutes;"],"file":"map-routes.js"}