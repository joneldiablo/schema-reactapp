{"version":3,"sources":["../../src/js/components/container.jsx"],"names":["Container","props","clearTimeout","onResizeTimeout","setTimeout","wrapper","current","width","offsetWidth","height","offsetHeight","eventEmitter","dispatch","id","React","createRef","responsive","resizeSensor","ResizeSensor","onResize","className","style","children","Component"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAEqBA,S;;;;;AAEnB,qBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,8BAAMA,KAAN;;AADiB,+DAKR,YAAM;AACfC,MAAAA,YAAY,CAAC,MAAKC,eAAN,CAAZ;AACA,YAAKA,eAAL,GAAuBC,UAAU,CAAC,YAAM;AAAA,oCACa,MAAKC,OAAL,CAAaC,OAD1B;AAAA,YACnBC,KADmB,yBAChCC,WADgC;AAAA,YACEC,MADF,yBACZC,YADY;;AAEtCC,iCAAaC,QAAb,CAAsB,YAAY,MAAKX,KAAL,CAAWY,EAA7C,EAAiD;AAC/CN,UAAAA,KAAK,EAALA,KAD+C;AAE/CE,UAAAA,MAAM,EAANA;AAF+C,SAAjD;AAID,OANgC,EAM9B,GAN8B,CAAjC;AAOD,KAdkB;;AAEjB,UAAKJ,OAAL,gBAAeS,kBAAMC,SAAN,EAAf;AAFiB;AAGlB;;;;wCAamB;AAClB,UAAI,KAAKd,KAAL,CAAWe,UAAf,EACE,KAAKC,YAAL,GAAoB,IAAIC,wBAAJ,CAAiB,KAAKb,OAAL,CAAaC,OAA9B,EAAuC,KAAKa,QAA5C,CAApB;AACH;;;2CAEsB;AACrBjB,MAAAA,YAAY,CAAC,KAAKC,eAAN,CAAZ;AACD;;;6BAEQ;AAAA,wBACwB,KAAKF,KAD7B;AAAA,UACDY,EADC,eACDA,EADC;AAAA,UACGO,SADH,eACGA,SADH;AAAA,UACcC,KADd,eACcA,KADd;AAEP,0BAAO;AAAK,QAAA,EAAE,EAAER,EAAT;AAAa,QAAA,GAAG,EAAE,KAAKR,OAAvB;AAAgC,QAAA,SAAS,EAAEe,SAA3C;AAAsD,QAAA,KAAK,EAAEC;AAA7D,SACJ,KAAKpB,KAAL,CAAWqB,QADP,CAAP;AAGD;;;;EAhCoCR,kBAAMS,S","sourcesContent":["import React from \"react\";\nimport ResizeSensor from \"css-element-queries/src/ResizeSensor\";\nimport eventEmitter from \"../event-emitter\";\n\nexport default class Container extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.wrapper = React.createRef();\n  }\n\n  onResize = () => {\n    clearTimeout(this.onResizeTimeout);\n    this.onResizeTimeout = setTimeout(() => {\n      let { offsetWidth: width, offsetHeight: height } = this.wrapper.current;\n      eventEmitter.dispatch('resize-' + this.props.id, {\n        width,\n        height\n      });\n    }, 200);\n  }\n\n  componentDidMount() {\n    if (this.props.responsive)\n      this.resizeSensor = new ResizeSensor(this.wrapper.current, this.onResize);\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.onResizeTimeout);\n  }\n\n  render() {\n    let { id, className, style } = this.props;\n    return <div id={id} ref={this.wrapper} className={className} style={style}>\n      {this.props.children}\n    </div>\n  }\n}"],"file":"container.js"}